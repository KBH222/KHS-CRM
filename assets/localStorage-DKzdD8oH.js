import{e as n,n as i,f as l}from"./index-DEcLH6Mq.js";var a=(e=>(e.PUBLIC="public",e.INTERNAL="internal",e.CONFIDENTIAL="confidential",e.RESTRICTED="restricted",e))(a||{});const r={CUSTOMERS:"khs_crm_customers",JOBS:"khs_crm_jobs",MATERIALS:"khs_crm_materials",PROFILE:"khs_crm_profile",CALENDAR_JOBS:"khs_crm_calendar_jobs"},E={[r.CUSTOMERS]:a.PUBLIC,[r.JOBS]:a.INTERNAL,[r.MATERIALS]:a.PUBLIC,[r.PROFILE]:a.INTERNAL,[r.CALENDAR_JOBS]:a.INTERNAL},s={get:(e,o)=>{try{const t=localStorage.getItem(e);if(!t)return o;const c=JSON.parse(t);return c.metadata?(c.metadata.encrypted&&l.isReady()&&console.warn(`Data for ${e} is encrypted but using sync storage`),c.data):c}catch(t){return console.error(`Error reading from localStorage for key ${e}:`,t),o}},set:(e,o)=>{try{const t=E[e]||a.INTERNAL;let c=o,S=!1;if(i(t)&&l.isReady()){const A=async()=>{c=await l.encrypt(o,t),S=!0};console.warn(`Data for ${e} should be encrypted but using sync storage`)}const g={data:c,metadata:{classification:t,lastModified:new Date().toISOString(),version:1,encrypted:S}};localStorage.setItem(e,JSON.stringify(g)),window.dispatchEvent(new Event("storage"))}catch(t){console.error(`Error writing to localStorage for key ${e}:`,t)}},remove:e=>{try{localStorage.removeItem(e)}catch(o){console.error(`Error removing from localStorage for key ${e}:`,o)}},clear:()=>{try{Object.values(r).forEach(e=>{localStorage.removeItem(e)})}catch(e){console.error("Error clearing localStorage:",e)}}},d={getAll:()=>{const e=s.get(r.CUSTOMERS,[]);return n.logAccess("read","customers",a.PUBLIC,{count:e.length}),e},save:e=>{s.set(r.CUSTOMERS,e),n.logAccess("write","customers",a.PUBLIC,{count:e.length})},clear:()=>{s.remove(r.CUSTOMERS),n.logAccess("delete","customers",a.PUBLIC)},canSync:()=>!0},m={get:()=>{const e=s.get(r.PROFILE,null);return n.logAccess("read","profile",a.CONFIDENTIAL),e},save:e=>{s.set(r.PROFILE,e),n.logAccess("write","profile",a.CONFIDENTIAL)},clear:()=>{s.remove(r.PROFILE),n.logAccess("delete","profile",a.CONFIDENTIAL)}},O={getAll:()=>s.get(r.CALENDAR_JOBS,[]).map(o=>({...o,startDate:new Date(o.startDate),endDate:new Date(o.endDate)})),save:e=>{const o=e.map(t=>({...t,startDate:t.startDate.toISOString(),endDate:t.endDate.toISOString()}));s.set(r.CALENDAR_JOBS,o)},clear:()=>s.remove(r.CALENDAR_JOBS)};export{O as a,d as c,m as p};
//# sourceMappingURL=localStorage-DKzdD8oH.js.map
