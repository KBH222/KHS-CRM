import{c as n,g as o,s as a}from"./index-DEcLH6Mq.js";const i={CUSTOMERS:"/api/customers",CUSTOMER_BY_ID:c=>`/api/customers/${c}`};class m{async getCustomers(e){if(navigator.onLine)try{const r=await n.get(i.CUSTOMERS);for(const t of r)await o.saveCustomer(t);return r}catch(r){console.error("[CustomerService] API fetch failed, falling back to local",r)}return o.getCustomers(e)}async getCustomer(e){const r=await o.getCustomer(e);if(navigator.onLine&&!e.startsWith("temp_"))try{const t=await n.get(i.CUSTOMER_BY_ID(e));return await o.saveCustomer(t),t}catch(t){console.error("[CustomerService] API fetch failed for customer",e,t)}return r}async createCustomer(e){const r=`temp_customer_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,t=new Date,s={id:r,reference:`TEMP-${Date.now()}`,name:e.name,phone:e.phone||null,email:e.email||null,address:e.address,notes:e.notes||null,isArchived:!1,createdAt:t,updatedAt:t,createdBy:"current-user",modifiedBy:"current-user"};return await o.saveCustomer(s),console.log("[CustomerService] Created customer locally",s),await a.queueOperation({operation:"create",entityType:"customer",payload:{name:e.name,phone:e.phone,email:e.email,address:e.address,notes:e.notes},timestamp:t}),navigator.onLine&&a.syncAll(),s}async updateCustomer(e,r){const t=await o.getCustomer(e);if(!t)throw new Error("Customer not found");const s={...t,...r,updatedAt:new Date,modifiedBy:"current-user"};return await o.saveCustomer(s),console.log("[CustomerService] Updated customer locally",s),e.startsWith("temp_")||(await a.queueOperation({operation:"update",entityType:"customer",entityId:e,payload:r,timestamp:new Date}),navigator.onLine&&a.syncAll()),s}async deleteCustomer(e){await o.deleteCustomer(e),console.log("[CustomerService] Deleted customer locally",e),e.startsWith("temp_")||(await a.queueOperation({operation:"delete",entityType:"customer",entityId:e,payload:{},timestamp:new Date}),navigator.onLine&&a.syncAll())}async refreshFromServer(){if(!navigator.onLine)throw new Error("Cannot refresh - device is offline");try{const e=await n.get(i.CUSTOMERS),r=await o.getCustomers();for(const t of r)t.id.startsWith("temp_")||await o.deleteCustomer(t.id);for(const t of e)await o.saveCustomer(t);console.log("[CustomerService] Refreshed from server",e.length,"customers")}catch(e){throw console.error("[CustomerService] Failed to refresh from server",e),e}}}const l=new m;export{l as c};
//# sourceMappingURL=customer.service.fixed-BwwfzteX.js.map
