{"version":3,"file":"ScheduleCalendar-BmxSHXq4.js","sources":["../../src/pages/ScheduleCalendar.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { calendarJobStorage, customerStorage } from '../utils/localStorage';\nimport { workerService } from '../services/worker.service';\n\nconst ScheduleCalendar = () => {\n  const navigate = useNavigate();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [view, setView] = useState('month'); // month, week, day, gantt\n  const [showJobModal, setShowJobModal] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [editingJob, setEditingJob] = useState(null);\n  const [showEditMenu, setShowEditMenu] = useState(null);\n  const [draggedJob, setDraggedJob] = useState(null);\n  const [dragOverDate, setDragOverDate] = useState(null);\n  const [quickAddDate, setQuickAddDate] = useState(null);\n  const [quickAddText, setQuickAddText] = useState('');\n  \n  // Load jobs from localStorage or use defaults\n  const [allJobs, setAllJobs] = useState(() => {\n    const savedJobs = calendarJobStorage.getAll();\n    if (savedJobs.length > 0) {\n      return savedJobs;\n    }\n    // Default jobs for first time\n    return [\n      {\n        id: 'job1',\n        customerId: '1',\n        customerName: 'Sarah Johnson',\n        title: 'Kitchen Remodel',\n        startDate: new Date(2024, 11, 15), // Dec 15\n        endDate: new Date(2024, 11, 22),\n        workers: ['KBH'],\n        color: '#3B82F6',\n        price: 15000,\n        status: 'completed'\n      },\n      {\n        id: 'job2',\n        customerId: '1',\n        customerName: 'Sarah Johnson',\n        title: 'Bathroom Addition',\n        startDate: new Date(2024, 11, 18),\n        endDate: new Date(2024, 11, 20),\n        workers: ['ISA', 'TYL'],\n        color: '#10B981',\n        price: 8500,\n        status: 'in-progress'\n      },\n      {\n        id: 'job3',\n        customerId: '2',\n        customerName: 'Mike Davis',\n        title: 'Deck Installation',\n        startDate: new Date(2024, 11, 25),\n        endDate: new Date(2024, 11, 28),\n        workers: ['TYL'],\n        color: '#F59E0B',\n        price: 5000,\n        status: 'pending'\n      }\n    ];\n  });\n\n  // Save jobs to localStorage whenever they change\n  useEffect(() => {\n    calendarJobStorage.save(allJobs);\n  }, [allJobs]);\n\n  // Scroll to current date in Gantt view\n  useEffect(() => {\n    if (view === 'gantt') {\n      // Calculate scroll position for current date\n      const today = new Date().getDate();\n      const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n      const scrollPercentage = (today - 1) / daysInMonth;\n      \n      // Delay to ensure DOM is rendered\n      setTimeout(() => {\n        const scrollContainer = document.getElementById('gantt-scroll-container');\n        if (scrollContainer) {\n          const maxScroll = scrollContainer.scrollWidth - scrollContainer.clientWidth;\n          scrollContainer.scrollLeft = maxScroll * scrollPercentage;\n        }\n      }, 100);\n    }\n  }, [view, currentDate]);\n\n  // Get customers from localStorage for dropdown\n  const [customers, setCustomers] = useState([]);\n\n  // Load customers on component mount\n  useEffect(() => {\n    const savedCustomers = customerStorage.getAll();\n    setCustomers(savedCustomers.map(c => ({ id: c.id, name: c.name })));\n  }, []);\n\n  // Get workers from service\n  const [workers, setWorkers] = useState([]);\n  const [workerColors, setWorkerColors] = useState({});\n\n  useEffect(() => {\n    const loadedWorkers = workerService.getAll();\n    setWorkers(loadedWorkers.map(w => w.name));\n    \n    const colors = {};\n    loadedWorkers.forEach(w => {\n      colors[w.name] = w.color;\n    });\n    setWorkerColors(colors);\n  }, []);\n\n  // New job form state\n  const [newJob, setNewJob] = useState({\n    title: '',\n    customerId: '',\n    workers: [],\n    startDate: '',\n    endDate: '',\n    description: '',\n    isRecurring: false,\n    recurrenceType: 'weekly', // daily, weekly, biweekly, monthly\n    recurrenceEnd: '',\n    recurrenceCount: 1\n  });\n\n  // Calendar helpers\n  const getDaysInMonth = (date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  };\n\n  const getFirstDayOfMonth = (date) => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n  };\n\n  const getMonthName = (date) => {\n    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  };\n\n  const getJobsForDate = (date) => {\n    return allJobs.filter(job => {\n      const jobStart = new Date(job.startDate);\n      const jobEnd = new Date(job.endDate);\n      const checkDate = new Date(date);\n      \n      // Set all times to midnight for date comparison\n      jobStart.setHours(0, 0, 0, 0);\n      jobEnd.setHours(0, 0, 0, 0);\n      checkDate.setHours(0, 0, 0, 0);\n      \n      return checkDate >= jobStart && checkDate <= jobEnd;\n    });\n  };\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n    setEditingJob(null);\n    setNewJob({\n      title: '',\n      customerId: '',\n      workers: [],\n      startDate: date.toISOString().split('T')[0],\n      endDate: date.toISOString().split('T')[0],\n      description: '',\n      isRecurring: false,\n      recurrenceType: 'weekly',\n      recurrenceEnd: '',\n      recurrenceCount: 1\n    });\n    setShowJobModal(true);\n  };\n\n  const handleQuickAdd = (date) => {\n    if (quickAddText.trim()) {\n      // Create a quick job with default settings\n      const newJobEntry = {\n        id: `job${Date.now()}`,\n        customerId: customers[0]?.id || '1', // Default to first customer\n        customerName: customers[0]?.name || 'Default Customer',\n        title: quickAddText.trim(),\n        startDate: new Date(date),\n        endDate: new Date(date),\n        workers: workers.length > 0 ? [workers[0]] : [], // Default to first worker\n        color: workers.length > 0 ? workerColors[workers[0]] : '#3B82F6',\n        description: '',\n        status: 'pending'\n      };\n      \n      setAllJobs([...allJobs, newJobEntry]);\n      setQuickAddDate(null);\n      setQuickAddText('');\n    }\n  };\n\n  const handleCellKeyDown = (e, date) => {\n    if (e.key === 'Enter' && quickAddDate?.toDateString() === date.toDateString()) {\n      e.preventDefault();\n      handleQuickAdd(date);\n    } else if (e.key === 'Escape') {\n      setQuickAddDate(null);\n      setQuickAddText('');\n    }\n  };\n\n  const handleEditJob = (job) => {\n    setEditingJob(job);\n    setNewJob({\n      title: job.title,\n      customerId: job.customerId,\n      workers: [...job.workers],\n      startDate: new Date(job.startDate).toISOString().split('T')[0],\n      endDate: new Date(job.endDate).toISOString().split('T')[0],\n      description: job.description || ''\n    });\n    setShowJobModal(true);\n    setShowEditMenu(null);\n  };\n\n  const handleDeleteJob = (jobId) => {\n    if (confirm('Are you sure you want to delete this job?')) {\n      setAllJobs(allJobs.filter(job => job.id !== jobId));\n      setShowEditMenu(null);\n    }\n  };\n\n  const handleJobClick = (e, job) => {\n    e.stopPropagation();\n    setShowEditMenu(showEditMenu === job.id ? null : job.id);\n  };\n\n  const handleDragStart = (e, job) => {\n    e.stopPropagation();\n    setDraggedJob(job);\n    setShowEditMenu(null);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e, date) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (draggedJob) {\n      e.dataTransfer.dropEffect = 'move';\n      setDragOverDate(date);\n    }\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragOverDate(null);\n  };\n\n  const handleDrop = (e, targetDate) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (draggedJob && targetDate) {\n      const jobDuration = Math.ceil((new Date(draggedJob.endDate) - new Date(draggedJob.startDate)) / (1000 * 60 * 60 * 24));\n      const newStartDate = new Date(targetDate);\n      const newEndDate = new Date(targetDate);\n      newEndDate.setDate(newEndDate.getDate() + jobDuration);\n\n      setAllJobs(allJobs.map(job => \n        job.id === draggedJob.id \n          ? {\n              ...job,\n              startDate: newStartDate,\n              endDate: newEndDate\n            }\n          : job\n      ));\n    }\n    \n    setDraggedJob(null);\n    setDragOverDate(null);\n  };\n\n  const handleDragEnd = (e) => {\n    e.preventDefault();\n    setDraggedJob(null);\n    setDragOverDate(null);\n  };\n\n  const generateRecurringJobs = (baseJob, recurrenceType, recurrenceEnd, recurrenceCount) => {\n    const jobs = [];\n    const startDate = new Date(baseJob.startDate);\n    const endDate = new Date(baseJob.endDate);\n    const duration = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n    \n    let currentStart = new Date(startDate);\n    let currentEnd = new Date(endDate);\n    let count = 0;\n    \n    const maxDate = recurrenceEnd ? new Date(recurrenceEnd) : new Date();\n    maxDate.setFullYear(maxDate.getFullYear() + 1); // Max 1 year if no end date\n    \n    while (count < recurrenceCount && currentStart <= maxDate) {\n      jobs.push({\n        ...baseJob,\n        id: `${baseJob.id}_${count}`,\n        startDate: new Date(currentStart),\n        endDate: new Date(currentEnd),\n        parentJobId: baseJob.id,\n        recurrenceIndex: count\n      });\n      \n      // Move to next occurrence\n      switch (recurrenceType) {\n        case 'daily':\n          currentStart.setDate(currentStart.getDate() + 1);\n          currentEnd.setDate(currentEnd.getDate() + 1);\n          break;\n        case 'weekly':\n          currentStart.setDate(currentStart.getDate() + 7);\n          currentEnd.setDate(currentEnd.getDate() + 7);\n          break;\n        case 'biweekly':\n          currentStart.setDate(currentStart.getDate() + 14);\n          currentEnd.setDate(currentEnd.getDate() + 14);\n          break;\n        case 'monthly':\n          currentStart.setMonth(currentStart.getMonth() + 1);\n          currentEnd.setMonth(currentEnd.getMonth() + 1);\n          break;\n      }\n      \n      count++;\n    }\n    \n    return jobs;\n  };\n\n  const handleSubmitJob = (e) => {\n    e.preventDefault();\n    \n    if (!newJob.title || !newJob.customerId || newJob.workers.length === 0) {\n      alert('Please fill in all required fields and select at least one worker');\n      return;\n    }\n\n    const customer = customers.find(c => c.id === newJob.customerId);\n    \n    if (editingJob) {\n      // Update existing job\n      setAllJobs(allJobs.map(job => \n        job.id === editingJob.id \n          ? {\n              ...job,\n              title: newJob.title,\n              customerId: newJob.customerId,\n              customerName: customer.name,\n              startDate: new Date(newJob.startDate),\n              endDate: new Date(newJob.endDate),\n              workers: newJob.workers,\n              color: workerColors[newJob.workers[0]], // Use first worker's color\n              description: newJob.description\n            }\n          : job\n      ));\n    } else {\n      // Create new job\n      const baseJobEntry = {\n        id: `job${Date.now()}`,\n        customerId: newJob.customerId,\n        customerName: customer.name,\n        title: newJob.title,\n        startDate: new Date(newJob.startDate),\n        endDate: new Date(newJob.endDate),\n        workers: newJob.workers,\n        color: workerColors[newJob.workers[0]], // Use first worker's color\n        description: newJob.description,\n        isRecurring: newJob.isRecurring,\n        recurrenceType: newJob.recurrenceType\n      };\n      \n      if (newJob.isRecurring) {\n        // Generate all recurring instances\n        const recurringJobs = generateRecurringJobs(\n          baseJobEntry,\n          newJob.recurrenceType,\n          newJob.recurrenceEnd,\n          newJob.recurrenceCount\n        );\n        setAllJobs([...allJobs, ...recurringJobs]);\n      } else {\n        setAllJobs([...allJobs, baseJobEntry]);\n      }\n    }\n\n    setShowJobModal(false);\n    setEditingJob(null);\n    setNewJob({\n      title: '',\n      customerId: '',\n      workers: [],\n      startDate: '',\n      endDate: '',\n      description: '',\n      isRecurring: false,\n      recurrenceType: 'weekly',\n      recurrenceEnd: '',\n      recurrenceCount: 1\n    });\n  };\n\n  const navigateMonth = (direction) => {\n    const newDate = new Date(currentDate);\n    newDate.setMonth(currentDate.getMonth() + direction);\n    setCurrentDate(newDate);\n  };\n\n  const navigateWeek = (direction) => {\n    const newDate = new Date(currentDate);\n    newDate.setDate(currentDate.getDate() + (direction * 7));\n    setCurrentDate(newDate);\n  };\n\n  const navigateDay = (direction) => {\n    const newDate = new Date(currentDate);\n    newDate.setDate(currentDate.getDate() + direction);\n    setCurrentDate(newDate);\n  };\n\n  const getWeekRange = (date) => {\n    const start = new Date(date);\n    start.setDate(date.getDate() - date.getDay());\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n    \n    const formatDate = (d) => d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    return `${formatDate(start)} - ${formatDate(end)}, ${end.getFullYear()}`;\n  };\n\n  const getWeekDays = (date) => {\n    const days = [];\n    const start = new Date(date);\n    start.setDate(date.getDate() - date.getDay());\n    \n    for (let i = 0; i < 7; i++) {\n      const day = new Date(start);\n      day.setDate(start.getDate() + i);\n      days.push(day);\n    }\n    return days;\n  };\n\n  const renderCalendarDays = () => {\n    const daysInMonth = getDaysInMonth(currentDate);\n    const firstDay = getFirstDayOfMonth(currentDate);\n    const days = [];\n\n    // Empty cells for days before month starts\n    for (let i = 0; i < firstDay; i++) {\n      days.push(<div key={`empty-${i}`} style={{ padding: '10px' }} />);\n    }\n\n    // Days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n      const dayJobs = getJobsForDate(date);\n      const isToday = new Date().toDateString() === date.toDateString();\n\n      days.push(\n        <div\n          key={day}\n          style={{\n            border: '1px solid #E5E7EB',\n            minHeight: '100px',\n            padding: '8px',\n            backgroundColor: isToday ? '#FEF3C7' : dragOverDate?.toDateString() === date.toDateString() ? '#DBEAFE' : 'white',\n            borderColor: dragOverDate?.toDateString() === date.toDateString() ? '#3B82F6' : '#E5E7EB',\n            borderWidth: dragOverDate?.toDateString() === date.toDateString() ? '2px' : '1px',\n            position: 'relative',\n            overflow: 'hidden',\n            cursor: 'pointer',\n            transition: 'background-color 0.2s'\n          }}\n          onMouseEnter={(e) => {\n            if (!isToday && !dragOverDate) e.currentTarget.style.backgroundColor = '#F9FAFB';\n          }}\n          onMouseLeave={(e) => {\n            if (!isToday && !dragOverDate) e.currentTarget.style.backgroundColor = 'white';\n          }}\n          onDragOver={(e) => handleDragOver(e, date)}\n          onDragLeave={handleDragLeave}\n          onDrop={(e) => handleDrop(e, date)}\n          onClick={() => {\n            if (!quickAddDate) {\n              setQuickAddDate(date);\n              setQuickAddText('');\n            }\n          }}\n          tabIndex={0}\n          onKeyDown={(e) => {\n            if (!quickAddDate && e.key !== 'Tab') {\n              // Start typing to create a new job\n              setQuickAddDate(date);\n              setQuickAddText('');\n            }\n          }}\n        >\n          <div style={{ \n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '4px'\n          }}>\n            <div style={{ \n              fontWeight: '600',\n              color: isToday ? '#92400E' : '#374151'\n            }}>\n              {day}\n            </div>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDateClick(date);\n              }}\n              style={{\n                width: '20px',\n                height: '20px',\n                padding: 0,\n                backgroundColor: 'transparent',\n                border: '1px solid #E5E7EB',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '12px',\n                color: '#6B7280',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s'\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = '#3B82F6';\n                e.currentTarget.style.borderColor = '#3B82F6';\n                e.currentTarget.style.color = 'white';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = 'transparent';\n                e.currentTarget.style.borderColor = '#E5E7EB';\n                e.currentTarget.style.color = '#6B7280';\n              }}\n              title=\"Add job for this date\"\n            >\n              +\n            </button>\n          </div>\n          <div \n            style={{ fontSize: '12px' }}\n            onClick={(e) => {\n              if (quickAddDate?.toDateString() !== date.toDateString()) {\n                e.stopPropagation();\n                handleDateClick(date);\n              }\n            }}\n          >\n            {/* Quick Add Input */}\n            {quickAddDate?.toDateString() === date.toDateString() && (\n              <input\n                type=\"text\"\n                value={quickAddText}\n                onChange={(e) => setQuickAddText(e.target.value)}\n                onKeyDown={(e) => handleCellKeyDown(e, date)}\n                onBlur={() => {\n                  if (!quickAddText.trim()) {\n                    setQuickAddDate(null);\n                    setQuickAddText('');\n                  }\n                }}\n                onClick={(e) => e.stopPropagation()}\n                placeholder=\"Type job title...\"\n                autoFocus\n                style={{\n                  width: '100%',\n                  padding: '4px',\n                  marginBottom: '4px',\n                  border: '1px solid #3B82F6',\n                  borderRadius: '3px',\n                  fontSize: '11px',\n                  outline: 'none'\n                }}\n              />\n            )}\n            \n            {dayJobs.slice(0, 2).map((job, index) => (\n              <div key={job.id} style={{ position: 'relative' }}>\n                <div\n                  draggable\n                  onClick={(e) => handleJobClick(e, job)}\n                  onDragStart={(e) => handleDragStart(e, job)}\n                  onDragEnd={handleDragEnd}\n                  style={{\n                    backgroundColor: job.color,\n                    color: 'white',\n                    padding: '2px 4px',\n                    marginBottom: '2px',\n                    borderRadius: '3px',\n                    cursor: 'move',\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    whiteSpace: 'nowrap',\n                    fontSize: '11px',\n                    position: 'relative',\n                    opacity: draggedJob?.id === job.id ? 0.5 : 1,\n                    transition: 'opacity 0.2s'\n                  }}\n                  title={`${job.title} - ${job.customerName} (Drag to reschedule)${job.parentJobId ? ' - Recurring' : ''}`}\n                >\n                  {job.parentJobId && <span style={{ marginRight: '4px' }}>🔁</span>}\n                  {job.workers.join(', ')}: {job.title}\n                </div>\n                \n                {/* Edit Menu */}\n                {showEditMenu === job.id && (\n                  <>\n                    {/* Backdrop */}\n                    <div\n                      style={{\n                        position: 'fixed',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        backgroundColor: 'rgba(0, 0, 0, 0.3)',\n                        zIndex: 999\n                      }}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowEditMenu(null);\n                      }}\n                    />\n                    {/* Menu */}\n                    <div style={{\n                      position: 'fixed',\n                      top: '50%',\n                      left: '50%',\n                      transform: 'translate(-50%, -50%)',\n                      backgroundColor: 'white',\n                      border: '1px solid #E5E7EB',\n                      borderRadius: '8px',\n                      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n                      zIndex: 1000,\n                      minWidth: '200px',\n                      maxWidth: '90vw'\n                    }}>\n                      <div style={{\n                        padding: '12px 16px',\n                        borderBottom: '1px solid #E5E7EB',\n                        fontWeight: '600',\n                        fontSize: '14px',\n                        color: '#374151'\n                      }}>\n                        {job.title}\n                      </div>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        navigate(`/jobs/${job.id}`);\n                      }}\n                      style={{\n                        display: 'block',\n                        width: '100%',\n                        padding: '8px 12px',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        textAlign: 'left',\n                        cursor: 'pointer',\n                        fontSize: '12px',\n                        color: '#374151'\n                      }}\n                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                    >\n                      👁️ View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEditJob(job);\n                      }}\n                      style={{\n                        display: 'block',\n                        width: '100%',\n                        padding: '8px 12px',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        textAlign: 'left',\n                        cursor: 'pointer',\n                        fontSize: '12px',\n                        color: '#374151'\n                      }}\n                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                    >\n                      ✏️ Edit\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteJob(job.id);\n                      }}\n                      style={{\n                        display: 'block',\n                        width: '100%',\n                        padding: '8px 12px',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        textAlign: 'left',\n                        cursor: 'pointer',\n                        fontSize: '12px',\n                        color: '#DC2626'\n                      }}\n                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#FEE2E2'}\n                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                    >\n                      🗑️ Delete\n                    </button>\n                  </div>\n                  </>\n                )}\n              </div>\n            ))}\n            {dayJobs.length > 2 && (\n              <div style={{ fontSize: '11px', color: '#6B7280', fontStyle: 'italic' }}>\n                +{dayJobs.length - 2} more\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return days;\n  };\n\n  const renderWeekView = () => {\n    const weekDays = getWeekDays(currentDate);\n    const hours = Array.from({ length: 13 }, (_, i) => i + 6); // 6 AM to 6 PM\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        {/* Time column and day headers */}\n        <div style={{ display: 'flex' }}>\n          <div style={{ width: '60px' }} /> {/* Empty space for time column */}\n          {weekDays.map(day => {\n            const isToday = new Date().toDateString() === day.toDateString();\n            return (\n              <div\n                key={day.toISOString()}\n                style={{\n                  flex: 1,\n                  padding: '12px',\n                  textAlign: 'center',\n                  borderLeft: '1px solid #E5E7EB',\n                  backgroundColor: isToday ? '#FEF3C7' : '#F9FAFB',\n                  fontWeight: '600'\n                }}\n              >\n                <div style={{ fontSize: '12px', color: '#6B7280' }}>\n                  {day.toLocaleDateString('en-US', { weekday: 'short' })}\n                </div>\n                <div style={{ fontSize: '18px', color: isToday ? '#92400E' : '#374151' }}>\n                  {day.getDate()}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Time slots */}\n        {hours.map(hour => (\n          <div key={hour} style={{ display: 'flex', borderTop: '1px solid #E5E7EB' }}>\n            <div style={{\n              width: '60px',\n              padding: '20px 8px',\n              fontSize: '12px',\n              color: '#6B7280',\n              textAlign: 'right',\n              borderRight: '1px solid #E5E7EB'\n            }}>\n              {hour > 12 ? `${hour - 12} PM` : hour === 12 ? '12 PM' : `${hour} AM`}\n            </div>\n            {weekDays.map(day => {\n              const dayJobs = getJobsForDate(day);\n              const isToday = new Date().toDateString() === day.toDateString();\n              \n              return (\n                <div\n                  key={`${hour}-${day.toISOString()}`}\n                  style={{\n                    flex: 1,\n                    minHeight: '60px',\n                    padding: '4px',\n                    borderLeft: '1px solid #E5E7EB',\n                    backgroundColor: isToday ? '#FFFBEB' : dragOverDate?.toDateString() === day.toDateString() ? '#DBEAFE' : 'white',\n                    cursor: 'pointer',\n                    position: 'relative',\n                    transition: 'background-color 0.2s'\n                  }}\n                  onClick={() => {\n                    if (!quickAddDate) {\n                      setQuickAddDate(day);\n                      setQuickAddText('');\n                    } else if (quickAddDate?.toDateString() !== day.toDateString()) {\n                      handleDateClick(day);\n                    }\n                  }}\n                  onDragOver={(e) => handleDragOver(e, day)}\n                  onDragLeave={handleDragLeave}\n                  onDrop={(e) => handleDrop(e, day)}\n                >\n                  {/* Quick Add Input */}\n                  {quickAddDate?.toDateString() === day.toDateString() && (\n                    <input\n                      type=\"text\"\n                      value={quickAddText}\n                      onChange={(e) => setQuickAddText(e.target.value)}\n                      onKeyDown={(e) => handleCellKeyDown(e, day)}\n                      onBlur={() => {\n                        if (!quickAddText.trim()) {\n                          setQuickAddDate(null);\n                          setQuickAddText('');\n                        }\n                      }}\n                      onClick={(e) => e.stopPropagation()}\n                      placeholder=\"Type job title...\"\n                      autoFocus\n                      style={{\n                        width: '100%',\n                        padding: '4px',\n                        marginBottom: '4px',\n                        border: '1px solid #3B82F6',\n                        borderRadius: '3px',\n                        fontSize: '11px',\n                        outline: 'none'\n                      }}\n                    />\n                  )}\n                  \n                  {dayJobs.map(job => (\n                    <div\n                      key={job.id}\n                      draggable\n                      onClick={(e) => handleJobClick(e, job)}\n                      onDragStart={(e) => handleDragStart(e, job)}\n                      onDragEnd={handleDragEnd}\n                      style={{\n                        backgroundColor: job.color,\n                        color: 'white',\n                        padding: '4px',\n                        marginBottom: '2px',\n                        borderRadius: '4px',\n                        fontSize: '11px',\n                        whiteSpace: 'nowrap',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        cursor: 'move',\n                        opacity: draggedJob?.id === job.id ? 0.5 : 1,\n                        transition: 'opacity 0.2s'\n                      }}\n                      title={`${job.title} - ${job.customerName} (Drag to reschedule)`}\n                    >\n                      {job.workers.join(', ')}: {job.title}\n                    </div>\n                  ))}\n                  \n                  {/* Edit Menu - reuse same logic */}\n                  {dayJobs.map(job => showEditMenu === job.id && (\n                    <React.Fragment key={`menu-${job.id}`}>\n                      {/* Backdrop */}\n                      <div\n                        style={{\n                          position: 'fixed',\n                          top: 0,\n                          left: 0,\n                          right: 0,\n                          bottom: 0,\n                          backgroundColor: 'rgba(0, 0, 0, 0.3)',\n                          zIndex: 999\n                        }}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setShowEditMenu(null);\n                        }}\n                      />\n                      {/* Menu */}\n                      <div style={{\n                        position: 'fixed',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        backgroundColor: 'white',\n                        border: '1px solid #E5E7EB',\n                        borderRadius: '8px',\n                        boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n                        zIndex: 1000,\n                        minWidth: '200px',\n                        maxWidth: '90vw'\n                      }}>\n                        <div style={{\n                          padding: '12px 16px',\n                          borderBottom: '1px solid #E5E7EB',\n                          fontWeight: '600',\n                          fontSize: '14px',\n                          color: '#374151'\n                        }}>\n                          {job.title}\n                        </div>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          navigate(`/jobs/${job.id}`);\n                        }}\n                        style={{\n                          display: 'block',\n                          width: '100%',\n                          padding: '8px 12px',\n                          border: 'none',\n                          backgroundColor: 'transparent',\n                          textAlign: 'left',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          color: '#374151'\n                        }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                      >\n                        👁️ View Details\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleEditJob(job);\n                        }}\n                        style={{\n                          display: 'block',\n                          width: '100%',\n                          padding: '8px 12px',\n                          border: 'none',\n                          backgroundColor: 'transparent',\n                          textAlign: 'left',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          color: '#374151'\n                        }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                      >\n                        ✏️ Edit\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDeleteJob(job.id);\n                        }}\n                        style={{\n                          display: 'block',\n                          width: '100%',\n                          padding: '8px 12px',\n                          border: 'none',\n                          backgroundColor: 'transparent',\n                          textAlign: 'left',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          color: '#DC2626'\n                        }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#FEE2E2'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                      >\n                        🗑️ Delete\n                      </button>\n                    </div>\n                    </React.Fragment>\n                  ))}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderDayView = () => {\n    const dayJobs = getJobsForDate(currentDate);\n    const hours = Array.from({ length: 13 }, (_, i) => i + 6); // 6 AM to 6 PM\n    const isToday = new Date().toDateString() === currentDate.toDateString();\n\n    return (\n      <div style={{ \n        display: 'flex', \n        flexDirection: 'column',\n        height: '600px' // Fixed height for container\n      }}>\n        {/* Day header */}\n        <div style={{\n          padding: '16px',\n          backgroundColor: isToday ? '#FEF3C7' : '#F9FAFB',\n          borderBottom: '1px solid #E5E7EB',\n          textAlign: 'center',\n          flexShrink: 0\n        }}>\n          <h3 style={{ margin: 0, fontSize: '20px', fontWeight: '600', color: isToday ? '#92400E' : '#374151' }}>\n            {currentDate.toLocaleDateString('en-US', { weekday: 'long' })}\n          </h3>\n          <button\n            onClick={() => handleDateClick(currentDate)}\n            style={{\n              marginTop: '8px',\n              padding: '6px 12px',\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '12px'\n            }}\n          >\n            + Add Job\n          </button>\n        </div>\n\n        {/* Time slots - scrollable container */}\n        <div style={{\n          flex: 1,\n          overflowY: 'auto',\n          WebkitOverflowScrolling: 'touch'\n        }}>\n          {hours.map(hour => (\n          <div key={hour} style={{\n            display: 'flex',\n            borderBottom: '1px solid #E5E7EB',\n            minHeight: '80px'\n          }}>\n            <div style={{\n              width: '80px',\n              padding: '20px 12px',\n              fontSize: '14px',\n              color: '#6B7280',\n              textAlign: 'right',\n              borderRight: '1px solid #E5E7EB',\n              backgroundColor: '#F9FAFB'\n            }}>\n              {hour > 12 ? `${hour - 12}:00 PM` : hour === 12 ? '12:00 PM' : `${hour}:00 AM`}\n            </div>\n            <div style={{\n              flex: 1,\n              padding: '8px',\n              backgroundColor: isToday ? '#FFFBEB' : 'white',\n              position: 'relative'\n            }}>\n              {dayJobs.map(job => (\n                <div key={job.id}>\n                  <div\n                    draggable\n                    onClick={(e) => handleJobClick(e, job)}\n                    onDragStart={(e) => handleDragStart(e, job)}\n                    onDragEnd={handleDragEnd}\n                    style={{\n                      backgroundColor: job.color,\n                      color: 'white',\n                      padding: '8px 12px',\n                      marginBottom: '4px',\n                      borderRadius: '6px',\n                      cursor: 'move',\n                      boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n                      opacity: draggedJob?.id === job.id ? 0.5 : 1,\n                      transition: 'opacity 0.2s'\n                    }}\n                    title={`Drag to reschedule ${job.title}`}\n                  >\n                    <div style={{ fontWeight: '600', fontSize: '14px', marginBottom: '4px' }}>\n                      {job.title}\n                    </div>\n                    <div style={{ fontSize: '12px', opacity: 0.9 }}>\n                      {job.customerName} • {job.workers.join(', ')}\n                    </div>\n                    {job.description && (\n                      <div style={{ fontSize: '11px', marginTop: '4px', opacity: 0.8 }}>\n                        {job.description}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Edit Menu */}\n                  {showEditMenu === job.id && (\n                    <div style={{\n                      position: 'absolute',\n                      top: '40px',\n                      left: '20px',\n                      backgroundColor: 'white',\n                      border: '1px solid #E5E7EB',\n                      borderRadius: '6px',\n                      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n                      zIndex: 10,\n                      minWidth: '120px'\n                    }}>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          navigate(`/jobs/${job.id}`);\n                        }}\n                        style={{\n                          display: 'block',\n                          width: '100%',\n                          padding: '8px 12px',\n                          border: 'none',\n                          backgroundColor: 'transparent',\n                          textAlign: 'left',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          color: '#374151'\n                        }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                      >\n                        👁️ View Details\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleEditJob(job);\n                        }}\n                        style={{\n                          display: 'block',\n                          width: '100%',\n                          padding: '8px 12px',\n                          border: 'none',\n                          backgroundColor: 'transparent',\n                          textAlign: 'left',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          color: '#374151'\n                        }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                      >\n                        ✏️ Edit\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDeleteJob(job.id);\n                        }}\n                        style={{\n                          display: 'block',\n                          width: '100%',\n                          padding: '8px 12px',\n                          border: 'none',\n                          backgroundColor: 'transparent',\n                          textAlign: 'left',\n                          cursor: 'pointer',\n                          fontSize: '12px',\n                          color: '#DC2626'\n                        }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#FEE2E2'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                      >\n                        🗑️ Delete\n                      </button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderGanttView = () => {\n    // Get date range for current month\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const daysInMonth = endOfMonth.getDate();\n    \n    // Shared function to determine if a day is past - used by both header and grid\n    const isDayPast = (day) => {\n      const now = new Date();\n      const todayNum = now.getDate();\n      const isCurrentMonth = currentDate.getMonth() === now.getMonth() && \n                            currentDate.getFullYear() === now.getFullYear();\n      return isCurrentMonth && day <= (todayNum - 2); // 2 or more days ago\n    };\n    \n    // Filter jobs that occur in current month\n    const monthJobs = allJobs.filter(job => {\n      const jobStart = new Date(job.startDate);\n      const jobEnd = new Date(job.endDate);\n      return (jobStart <= endOfMonth && jobEnd >= startOfMonth);\n    });\n\n    // Group jobs by worker\n    const jobsByWorker = {};\n    workers.forEach(worker => {\n      jobsByWorker[worker] = monthJobs.filter(job => job.workers.includes(worker));\n    });\n\n    // Generate array of dates for the month\n    const dates = [];\n    for (let i = 1; i <= daysInMonth; i++) {\n      dates.push(i);\n    }\n\n\n    return (\n      <div \n        id=\"gantt-scroll-container\"\n        style={{ \n          overflowX: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          msOverflowStyle: '-ms-autohiding-scrollbar',\n          scrollbarWidth: 'thin'\n        }}\n      >\n        <div style={{ minWidth: '1000px' }}>\n          {/* Header with dates */}\n          <div style={{ display: 'flex', borderBottom: '2px solid #E5E7EB' }}>\n            <div style={{ \n              width: '120px', \n              padding: '12px',\n              backgroundColor: '#F9FAFB',\n              fontWeight: '600',\n              borderRight: '1px solid #E5E7EB'\n            }}>\n              Worker\n            </div>\n            <div style={{ flex: 1, display: 'flex' }}>\n              {dates.map(day => {\n                const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n                const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n                const isPast = isDayPast(day);\n                \n                return (\n                  <div\n                    key={day}\n                    style={{\n                      flex: 1,\n                      minWidth: '30px',\n                      padding: '8px 4px',\n                      textAlign: 'center',\n                      fontSize: '12px',\n                      backgroundColor: isPast ? '#E5E7EB' : isWeekend ? '#F9FAFB' : 'white',\n                      borderRight: '1px solid #E5E7EB',\n                      fontWeight: '400',\n                      color: isPast ? '#6B7280' : '#374151',\n                      borderTop: 'none'\n                    }}\n                  >\n                    {day}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Worker rows */}\n          {workers.map(worker => (\n            <div key={worker} style={{ display: 'flex', borderBottom: '1px solid #E5E7EB' }}>\n              <div style={{\n                width: '120px',\n                padding: '16px 12px',\n                backgroundColor: '#F9FAFB',\n                fontWeight: '500',\n                borderRight: '1px solid #E5E7EB',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '8px'\n              }}>\n                <div style={{\n                  width: '12px',\n                  height: '12px',\n                  backgroundColor: workerColors[worker],\n                  borderRadius: '2px'\n                }} />\n                {worker}\n              </div>\n              <div style={{ flex: 1, position: 'relative', height: '50px' }}>\n                {/* Date grid lines */}\n                <div style={{ display: 'flex', position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}>\n                  {dates.map(day => {\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n                    const isWeekend = date.getDay() === 0 || date.getDay() === 6;\n                    const isPast = isDayPast(day);\n                    \n                    return (\n                      <div\n                        key={day}\n                        style={{\n                          flex: 1,\n                          borderRight: '1px solid #E5E7EB',\n                          backgroundColor: isPast ? '#E5E7EB' : isWeekend ? '#FAFAFA' : 'transparent'\n                        }}\n                      />\n                    );\n                  })}\n                </div>\n                \n                {/* Jobs */}\n                {jobsByWorker[worker].map(job => {\n                  const jobStart = new Date(job.startDate);\n                  const jobEnd = new Date(job.endDate);\n                  \n                  // Calculate position and width\n                  let startDay = jobStart.getDate();\n                  let endDay = jobEnd.getDate();\n                  \n                  // Handle jobs that start before this month\n                  if (jobStart < startOfMonth) {\n                    startDay = 1;\n                  }\n                  \n                  // Handle jobs that end after this month\n                  if (jobEnd > endOfMonth) {\n                    endDay = daysInMonth;\n                  }\n                  \n                  const left = ((startDay - 1) / daysInMonth) * 100;\n                  const width = ((endDay - startDay + 1) / daysInMonth) * 100;\n                  \n                  return (\n                    <div\n                      key={job.id}\n                      onClick={(e) => handleJobClick(e, job)}\n                      style={{\n                        position: 'absolute',\n                        top: '8px',\n                        height: '34px',\n                        left: `${left}%`,\n                        width: `${width}%`,\n                        backgroundColor: job.color,\n                        borderRadius: '4px',\n                        padding: '4px 8px',\n                        color: 'white',\n                        fontSize: '12px',\n                        cursor: 'pointer',\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        textOverflow: 'ellipsis',\n                        boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n                        zIndex: 1,\n                        display: 'flex',\n                        alignItems: 'center'\n                      }}\n                      title={`${job.title} - ${job.customerName}`}\n                    >\n                      {job.title}\n                    </div>\n                  );\n                })}\n                \n                {/* Edit Menu */}\n                {jobsByWorker[worker].map(job => showEditMenu === job.id && (\n                  <div key={`menu-${job.id}`} style={{\n                    position: 'absolute',\n                    top: '50px',\n                    left: '50px',\n                    backgroundColor: 'white',\n                    border: '1px solid #E5E7EB',\n                    borderRadius: '6px',\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n                    zIndex: 10,\n                    minWidth: '120px'\n                  }}>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        navigate(`/jobs/${job.id}`);\n                      }}\n                      style={{\n                        display: 'block',\n                        width: '100%',\n                        padding: '8px 12px',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        textAlign: 'left',\n                        cursor: 'pointer',\n                        fontSize: '12px',\n                        color: '#374151'\n                      }}\n                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                    >\n                      👁️ View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEditJob(job);\n                      }}\n                      style={{\n                        display: 'block',\n                        width: '100%',\n                        padding: '8px 12px',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        textAlign: 'left',\n                        cursor: 'pointer',\n                        fontSize: '12px',\n                        color: '#374151'\n                      }}\n                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                    >\n                      ✏️ Edit\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteJob(job.id);\n                      }}\n                      style={{\n                        display: 'block',\n                        width: '100%',\n                        padding: '8px 12px',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        textAlign: 'left',\n                        cursor: 'pointer',\n                        fontSize: '12px',\n                        color: '#DC2626'\n                      }}\n                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#FEE2E2'}\n                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n                    >\n                      🗑️ Delete\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div \n      style={{ \n        height: '100%',\n        overflowY: 'auto',\n        WebkitOverflowScrolling: 'touch',\n        paddingBottom: '100px' // Extra padding for iOS scrolling\n      }}\n      onClick={() => setShowEditMenu(null)}\n    >\n      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '20px' }}>\n        {/* Header */}\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: '20px',\n          flexWrap: 'wrap',\n          gap: '12px'\n        }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\n          <button\n            onClick={() => navigate('/dashboard')}\n            style={{\n              background: 'none',\n              border: 'none',\n              padding: '8px',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              color: '#6B7280',\n              borderRadius: '6px'\n            }}\n            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#F3F4F6'}\n            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n          >\n            <svg style={{ width: '28px', height: '28px' }} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n            </svg>\n          </button>\n          <h1 style={{ fontSize: '24px', fontWeight: 'bold', margin: 0 }}>\n            Schedule\n          </h1>\n        </div>\n        <button\n            onClick={() => {\n              const today = new Date();\n              setEditingJob(null);\n              setNewJob({\n                title: '',\n                customerId: '',\n                workers: [],\n                startDate: today.toISOString().split('T')[0],\n                endDate: today.toISOString().split('T')[0],\n                description: '',\n                isRecurring: false,\n                recurrenceType: 'weekly',\n                recurrenceEnd: '',\n                recurrenceCount: 1\n              });\n              setShowJobModal(true);\n            }}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: '#3B82F6',\n              color: 'white',\n              border: 'none',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '14px'\n            }}\n          >\n            + New Job\n          </button>\n        </div>\n\n        {/* View Switcher */}\n        <div style={{\n          display: 'flex',\n          gap: '8px',\n          marginBottom: '16px',\n          justifyContent: 'center',\n          flexWrap: 'wrap'\n        }}>\n          {['month', 'week', 'day', 'gantt'].map(v => (\n            <button\n              key={v}\n              onClick={() => setView(v)}\n              style={{\n                padding: '10px 20px',\n                backgroundColor: view === v ? '#3B82F6' : 'white',\n                color: view === v ? 'white' : '#374151',\n                border: `1px solid ${view === v ? '#3B82F6' : '#E5E7EB'}`,\n                borderRadius: '6px',\n                cursor: 'pointer',\n                fontSize: '16px',\n                fontWeight: view === v ? '500' : '400',\n                textTransform: 'capitalize',\n                minHeight: '44px', // iOS minimum touch target\n                WebkitTapHighlightColor: 'transparent'\n              }}\n            >\n              {v}\n            </button>\n          ))}\n        </div>\n\n        {/* Calendar Navigation */}\n        <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          backgroundColor: 'white',\n          padding: '16px',\n          borderRadius: '8px',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n          marginBottom: '20px'\n        }}>\n          <button\n            onClick={() => {\n              if (view === 'month' || view === 'gantt') navigateMonth(-1);\n              else if (view === 'week') navigateWeek(-1);\n              else if (view === 'day') navigateDay(-1);\n            }}\n            style={{\n              padding: '8px 12px',\n              backgroundColor: '#F3F4F6',\n              border: 'none',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '14px'\n            }}\n          >\n            ← Previous\n          </button>\n          \n          <h2 style={{ fontSize: '20px', fontWeight: '600', margin: 0 }}>\n            {view === 'month' && getMonthName(currentDate)}\n            {view === 'week' && getWeekRange(currentDate)}\n            {view === 'day' && currentDate.toLocaleDateString('en-US', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            })}\n            {view === 'gantt' && `${currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })} - Gantt Chart`}\n          </h2>\n          \n          <button\n            onClick={() => {\n              if (view === 'month' || view === 'gantt') navigateMonth(1);\n              else if (view === 'week') navigateWeek(1);\n              else if (view === 'day') navigateDay(1);\n            }}\n            style={{\n              padding: '8px 12px',\n              backgroundColor: '#F3F4F6',\n              border: 'none',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '14px'\n            }}\n          >\n            Next →\n          </button>\n        </div>\n      </div>\n\n      {/* Calendar Grid */}\n      <div style={{\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n        overflow: 'hidden'\n      }}>\n        {view === 'month' && (\n          <>\n            {/* Weekday Headers */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(7, 1fr)',\n              backgroundColor: '#F9FAFB',\n              borderBottom: '1px solid #E5E7EB'\n            }}>\n              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                <div\n                  key={day}\n                  style={{\n                    padding: '12px',\n                    fontWeight: '600',\n                    fontSize: '14px',\n                    textAlign: 'center',\n                    color: '#374151'\n                  }}\n                >\n                  {day}\n                </div>\n              ))}\n            </div>\n\n            {/* Calendar Days */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(7, 1fr)'\n            }}>\n              {renderCalendarDays()}\n            </div>\n          </>\n        )}\n\n        {view === 'week' && renderWeekView()}\n        {view === 'day' && renderDayView()}\n        {view === 'gantt' && renderGanttView()}\n      </div>\n\n      {/* Legend */}\n      <div style={{\n        marginTop: '20px',\n        padding: '16px',\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\n      }}>\n        <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '12px' }}>\n          Worker Legend\n        </h3>\n        <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>\n          {workers.map(workerName => (\n            <div key={workerName} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <div style={{ width: '20px', height: '20px', backgroundColor: workerColors[workerName], borderRadius: '4px' }} />\n              <span style={{ fontSize: '14px' }}>{workerName}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Job Creation Modal */}\n      {showJobModal && (\n        <div style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          zIndex: 50,\n          overflowY: 'auto',\n          paddingTop: '20px',\n          paddingBottom: '20px'\n        }}>\n          <div style={{\n            backgroundColor: 'white',\n            borderRadius: '8px',\n            padding: '24px',\n            maxWidth: '500px',\n            width: '90%',\n            maxHeight: 'calc(100vh - 40px)',\n            overflowY: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            margin: '0 auto'\n          }}>\n            <h2 style={{ fontSize: '20px', fontWeight: '600', marginBottom: '20px' }}>\n              {editingJob ? 'Edit Job' : 'Schedule New Job'}\n            </h2>\n\n            <form onSubmit={handleSubmitJob}>\n              {/* Job Title */}\n              <div style={{ marginBottom: '16px' }}>\n                <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                  Job Title *\n                </label>\n                <input\n                  type=\"text\"\n                  value={newJob.title}\n                  onChange={(e) => setNewJob({ ...newJob, title: e.target.value })}\n                  placeholder=\"e.g., Kitchen Remodel\"\n                  style={{\n                    width: '100%',\n                    padding: '8px 12px',\n                    border: '1px solid #E5E7EB',\n                    borderRadius: '6px',\n                    fontSize: '14px'\n                  }}\n                  required\n                />\n              </div>\n\n              {/* Customer */}\n              <div style={{ marginBottom: '16px' }}>\n                <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                  Customer *\n                </label>\n                <select\n                  value={newJob.customerId}\n                  onChange={(e) => setNewJob({ ...newJob, customerId: e.target.value })}\n                  style={{\n                    width: '100%',\n                    padding: '8px 12px',\n                    border: '1px solid #E5E7EB',\n                    borderRadius: '6px',\n                    fontSize: '14px',\n                    backgroundColor: 'white',\n                    cursor: 'pointer',\n                    appearance: 'none',\n                    backgroundImage: 'url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 24 24\\' fill=\\'none\\' stroke=\\'currentColor\\' stroke-width=\\'2\\' stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\'%3e%3cpolyline points=\\'6 9 12 15 18 9\\'%3e%3c/polyline%3e%3c/svg%3e\")',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundPosition: 'right 8px center',\n                    backgroundSize: '20px',\n                    paddingRight: '36px',\n                    transition: 'border-color 0.2s'\n                  }}\n                  onFocus={(e) => e.target.style.borderColor = '#3B82F6'}\n                  onBlur={(e) => e.target.style.borderColor = '#E5E7EB'}\n                  onMouseEnter={(e) => e.target.style.borderColor = '#9CA3AF'}\n                  onMouseLeave={(e) => e.target.style.borderColor = '#E5E7EB'}\n                  required\n                >\n                  <option value=\"\">Select a customer...</option>\n                  {customers.length === 0 ? (\n                    <option disabled>No customers available</option>\n                  ) : (\n                    customers.map(customer => (\n                      <option key={customer.id} value={customer.id}>\n                        {customer.name}\n                      </option>\n                    ))\n                  )}\n                </select>\n              </div>\n\n              {/* Worker Assignment */}\n              <div style={{ marginBottom: '16px' }}>\n                <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                  Assign Workers * (Select one or more)\n                </label>\n                <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>\n                  {workers.map(worker => (\n                    <label\n                      key={worker}\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: '6px',\n                        cursor: 'pointer',\n                        padding: '6px 12px',\n                        border: '1px solid #E5E7EB',\n                        borderRadius: '6px',\n                        backgroundColor: newJob.workers.includes(worker) ? '#EBF5FF' : 'white',\n                        transition: 'all 0.2s'\n                      }}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        value={worker}\n                        checked={newJob.workers.includes(worker)}\n                        onChange={(e) => {\n                          if (e.target.checked) {\n                            setNewJob({ ...newJob, workers: [...newJob.workers, worker] });\n                          } else {\n                            setNewJob({ ...newJob, workers: newJob.workers.filter(w => w !== worker) });\n                          }\n                        }}\n                        style={{ cursor: 'pointer' }}\n                      />\n                      <span style={{ fontSize: '14px', fontWeight: newJob.workers.includes(worker) ? '500' : '400' }}>\n                        {worker}\n                      </span>\n                      <div style={{\n                        width: '16px',\n                        height: '16px',\n                        backgroundColor: workerColors[worker],\n                        borderRadius: '4px'\n                      }} />\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Date Range */}\n              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '16px' }}>\n                <div>\n                  <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                    Start Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={newJob.startDate}\n                    onChange={(e) => setNewJob({ ...newJob, startDate: e.target.value })}\n                    style={{\n                      width: '100%',\n                      padding: '8px 12px',\n                      border: '1px solid #E5E7EB',\n                      borderRadius: '6px',\n                      fontSize: '14px'\n                    }}\n                    required\n                  />\n                </div>\n                <div>\n                  <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                    End Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={newJob.endDate}\n                    onChange={(e) => setNewJob({ ...newJob, endDate: e.target.value })}\n                    min={newJob.startDate}\n                    style={{\n                      width: '100%',\n                      padding: '8px 12px',\n                      border: '1px solid #E5E7EB',\n                      borderRadius: '6px',\n                      fontSize: '14px'\n                    }}\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Description */}\n              <div style={{ marginBottom: '16px' }}>\n                <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                  Description\n                </label>\n                <textarea\n                  value={newJob.description}\n                  onChange={(e) => setNewJob({ ...newJob, description: e.target.value })}\n                  placeholder=\"Add job details...\"\n                  rows={3}\n                  style={{\n                    width: '100%',\n                    padding: '8px 12px',\n                    border: '1px solid #E5E7EB',\n                    borderRadius: '6px',\n                    fontSize: '14px',\n                    resize: 'vertical'\n                  }}\n                />\n              </div>\n\n              {/* Recurring Job Settings */}\n              {!editingJob && (\n                <div style={{ marginBottom: '20px' }}>\n                  <label style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '8px',\n                    marginBottom: '12px',\n                    cursor: 'pointer'\n                  }}>\n                    <input\n                      type=\"checkbox\"\n                      checked={newJob.isRecurring}\n                      onChange={(e) => setNewJob({ ...newJob, isRecurring: e.target.checked })}\n                      style={{ cursor: 'pointer' }}\n                    />\n                    <span style={{ fontSize: '14px', fontWeight: '500' }}>\n                      Make this a recurring job\n                    </span>\n                  </label>\n\n                  {newJob.isRecurring && (\n                    <div style={{\n                      padding: '16px',\n                      backgroundColor: '#F9FAFB',\n                      borderRadius: '6px',\n                      border: '1px solid #E5E7EB'\n                    }}>\n                      <div style={{ marginBottom: '12px' }}>\n                        <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                          Repeat Every\n                        </label>\n                        <select\n                          value={newJob.recurrenceType}\n                          onChange={(e) => setNewJob({ ...newJob, recurrenceType: e.target.value })}\n                          style={{\n                            width: '100%',\n                            padding: '8px 12px',\n                            border: '1px solid #E5E7EB',\n                            borderRadius: '6px',\n                            fontSize: '14px',\n                            backgroundColor: 'white',\n                            cursor: 'pointer'\n                          }}\n                        >\n                          <option value=\"daily\">Day</option>\n                          <option value=\"weekly\">Week</option>\n                          <option value=\"biweekly\">Two Weeks</option>\n                          <option value=\"monthly\">Month</option>\n                        </select>\n                      </div>\n\n                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>\n                        <div>\n                          <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                            Number of Occurrences\n                          </label>\n                          <input\n                            type=\"number\"\n                            value={newJob.recurrenceCount}\n                            onChange={(e) => setNewJob({ ...newJob, recurrenceCount: parseInt(e.target.value) || 1 })}\n                            min=\"1\"\n                            max=\"52\"\n                            style={{\n                              width: '100%',\n                              padding: '8px 12px',\n                              border: '1px solid #E5E7EB',\n                              borderRadius: '6px',\n                              fontSize: '14px'\n                            }}\n                          />\n                        </div>\n                        <div>\n                          <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>\n                            End By (Optional)\n                          </label>\n                          <input\n                            type=\"date\"\n                            value={newJob.recurrenceEnd}\n                            onChange={(e) => setNewJob({ ...newJob, recurrenceEnd: e.target.value })}\n                            min={newJob.startDate}\n                            style={{\n                              width: '100%',\n                              padding: '8px 12px',\n                              border: '1px solid #E5E7EB',\n                              borderRadius: '6px',\n                              fontSize: '14px'\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Buttons */}\n              <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    setShowJobModal(false);\n                    setEditingJob(null);\n                    setNewJob({\n                      title: '',\n                      customerId: '',\n                      workers: [],\n                      startDate: '',\n                      endDate: '',\n                      description: '',\n                      isRecurring: false,\n                      recurrenceType: 'weekly',\n                      recurrenceEnd: '',\n                      recurrenceCount: 1\n                    });\n                  }}\n                  style={{\n                    padding: '8px 16px',\n                    backgroundColor: '#E5E7EB',\n                    color: '#374151',\n                    border: 'none',\n                    borderRadius: '6px',\n                    cursor: 'pointer',\n                    fontSize: '14px'\n                  }}\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  style={{\n                    padding: '8px 16px',\n                    backgroundColor: '#3B82F6',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '6px',\n                    cursor: 'pointer',\n                    fontSize: '14px'\n                  }}\n                >\n                  {editingJob ? 'Update Job' : 'Create Job'}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScheduleCalendar;"],"names":["ScheduleCalendar","navigate","useNavigate","currentDate","setCurrentDate","useState","view","setView","showJobModal","setShowJobModal","selectedDate","setSelectedDate","editingJob","setEditingJob","showEditMenu","setShowEditMenu","draggedJob","setDraggedJob","dragOverDate","setDragOverDate","quickAddDate","setQuickAddDate","quickAddText","setQuickAddText","allJobs","setAllJobs","savedJobs","calendarJobStorage","useEffect","today","daysInMonth","scrollPercentage","scrollContainer","maxScroll","customers","setCustomers","savedCustomers","customerStorage","c","workers","setWorkers","workerColors","setWorkerColors","loadedWorkers","workerService","w","colors","newJob","setNewJob","getDaysInMonth","date","getFirstDayOfMonth","getMonthName","getJobsForDate","job","jobStart","jobEnd","checkDate","handleDateClick","handleQuickAdd","newJobEntry","_a","_b","handleCellKeyDown","handleEditJob","handleDeleteJob","jobId","handleJobClick","handleDragStart","handleDragOver","handleDragLeave","handleDrop","targetDate","jobDuration","newStartDate","newEndDate","handleDragEnd","generateRecurringJobs","baseJob","recurrenceType","recurrenceEnd","recurrenceCount","jobs","startDate","endDate","currentStart","currentEnd","count","maxDate","handleSubmitJob","customer","baseJobEntry","recurringJobs","navigateMonth","direction","newDate","navigateWeek","navigateDay","getWeekRange","start","end","formatDate","d","getWeekDays","days","day","renderCalendarDays","firstDay","jsx","dayJobs","isToday","jsxs","e","index","Fragment","renderWeekView","weekDays","hours","_","hour","React","renderDayView","i","renderGanttView","startOfMonth","endOfMonth","isDayPast","now","todayNum","monthJobs","jobsByWorker","worker","dates","isWeekend","isPast","startDay","endDay","left","width","v","workerName"],"mappings":"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"}