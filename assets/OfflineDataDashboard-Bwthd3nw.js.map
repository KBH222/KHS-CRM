{"version":3,"file":"OfflineDataDashboard-Bwthd3nw.js","sources":["../../src/components/SyncManagementModal.tsx","../../src/components/OfflineDataIndicator.tsx","../../src/components/OfflineDataDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { syncService } from '../services/sync.service';\nimport { offlineDb } from '../services/db.service';\n// Inline type definitions\ninterface SyncOperation {\n  id: string;\n  operation: 'create' | 'update' | 'delete';\n  entityType: 'customer' | 'job' | 'material' | 'user';\n  entityId?: string;\n  payload: any;\n  timestamp: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  attempts: number;\n  lastAttemptAt?: string;\n  errorMessage?: string;\n}\n\ninterface SyncManagementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface SyncQueueItem extends SyncOperation {\n  _priority: number;\n  _attempts: number;\n  _status: 'pending' | 'processing' | 'failed' | 'completed';\n  _lastAttempt?: number;\n}\n\ninterface DatabaseStats {\n  size: number;\n  customers: number;\n  jobs: number;\n  materials: number;\n  pendingSync: number;\n  unsynced: number;\n  lastSync?: Date;\n}\n\nconst SyncManagementModal: React.FC<SyncManagementModalProps> = ({ isOpen, onClose }) => {\n  const [activeTab, setActiveTab] = useState<'queue' | 'stats' | 'conflicts'>('queue');\n  const [syncQueue, setSyncQueue] = useState<SyncQueueItem[]>([]);\n  const [dbStats, setDbStats] = useState<DatabaseStats | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    if (isOpen) {\n      loadData();\n      const interval = setInterval(loadData, 2000);\n      return () => clearInterval(interval);\n    }\n  }, [isOpen]);\n\n  const loadData = async () => {\n    try {\n      const [queue, stats] = await Promise.all([\n        offlineDb.getSyncQueue(),\n        offlineDb.getDatabaseStats(),\n      ]);\n\n      setSyncQueue(queue as SyncQueueItem[]);\n      setDbStats(stats);\n    } catch (error) {\n      console.error('Failed to load sync management data:', error);\n    }\n  };\n\n  const handleForceSync = async () => {\n    setIsLoading(true);\n    try {\n      await syncService.forceSync();\n      await loadData();\n    } catch (error) {\n      console.error('Force sync failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClearQueue = async () => {\n    if (window.confirm('Are you sure you want to clear the entire sync queue? This cannot be undone.')) {\n      setIsLoading(true);\n      try {\n        await syncService.clearSyncQueue();\n        await loadData();\n      } catch (error) {\n        console.error('Failed to clear sync queue:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleRetrySelected = async () => {\n    if (selectedItems.size === 0) return;\n\n    setIsLoading(true);\n    try {\n      for (const operationId of selectedItems) {\n        await offlineDb.updateSyncOperationStatus(operationId, 'pending');\n      }\n      setSelectedItems(new Set());\n      await loadData();\n      // Trigger sync to process the retried items\n      syncService.forceSync();\n    } catch (error) {\n      console.error('Failed to retry selected operations:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRemoveSelected = async () => {\n    if (selectedItems.size === 0) return;\n\n    if (window.confirm(`Are you sure you want to remove ${selectedItems.size} operations from the queue?`)) {\n      setIsLoading(true);\n      try {\n        for (const operationId of selectedItems) {\n          await offlineDb.removeSyncOperation(operationId);\n        }\n        setSelectedItems(new Set());\n        await loadData();\n      } catch (error) {\n        console.error('Failed to remove selected operations:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedItems.size === syncQueue.length) {\n      setSelectedItems(new Set());\n    } else {\n      setSelectedItems(new Set(syncQueue.map(item => item.id)));\n    }\n  };\n\n  const toggleSelectItem = (id: string) => {\n    const newSelected = new Set(selectedItems);\n    if (newSelected.has(id)) {\n      newSelected.delete(id);\n    } else {\n      newSelected.add(id);\n    }\n    setSelectedItems(newSelected);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'processing': return 'bg-blue-100 text-blue-800';\n      case 'failed': return 'bg-red-100 text-red-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: number) => {\n    if (priority <= 2) return 'bg-red-100 text-red-800';\n    if (priority <= 4) return 'bg-yellow-100 text-yellow-800';\n    return 'bg-gray-100 text-gray-800';\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatTime = (timestamp: string | number | undefined) => {\n    if (!timestamp) return 'N/A';\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[80vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">Sync Management</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"border-b\">\n          <nav className=\"flex space-x-8 px-6\">\n            {[\n              { key: 'queue', label: 'Sync Queue', count: syncQueue.length },\n              { key: 'stats', label: 'Database Stats' },\n              { key: 'conflicts', label: 'Conflicts', count: syncQueue.filter(q => q._attempts > 0).length },\n            ].map((tab) => (\n              <button\n                key={tab.key}\n                onClick={() => setActiveTab(tab.key as any)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab.key\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                {tab.label}\n                {tab.count !== undefined && tab.count > 0 && (\n                  <span className=\"ml-2 bg-gray-100 text-gray-600 py-1 px-2 rounded-full text-xs\">\n                    {tab.count}\n                  </span>\n                )}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Sync Queue Tab */}\n          {activeTab === 'queue' && (\n            <div className=\"h-full flex flex-col\">\n              {/* Queue Actions */}\n              <div className=\"p-4 border-b bg-gray-50\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedItems.size === syncQueue.length && syncQueue.length > 0}\n                        onChange={toggleSelectAll}\n                        className=\"rounded border-gray-300\"\n                      />\n                      <span className=\"ml-2 text-sm text-gray-700\">\n                        Select All ({selectedItems.size} selected)\n                      </span>\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={handleRetrySelected}\n                      disabled={selectedItems.size === 0 || isLoading}\n                      className=\"px-3 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-400\"\n                    >\n                      Retry Selected\n                    </button>\n                    <button\n                      onClick={handleRemoveSelected}\n                      disabled={selectedItems.size === 0 || isLoading}\n                      className=\"px-3 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600 disabled:bg-gray-400\"\n                    >\n                      Remove Selected\n                    </button>\n                    <button\n                      onClick={handleForceSync}\n                      disabled={isLoading}\n                      className=\"px-3 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600 disabled:bg-gray-400\"\n                    >\n                      {isLoading ? 'Syncing...' : 'Force Sync'}\n                    </button>\n                    <button\n                      onClick={handleClearQueue}\n                      disabled={isLoading}\n                      className=\"px-3 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600 disabled:bg-gray-400\"\n                    >\n                      Clear All\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Queue List */}\n              <div className=\"flex-1 overflow-auto\">\n                {syncQueue.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-32 text-gray-500\">\n                    No operations in sync queue\n                  </div>\n                ) : (\n                  <div className=\"divide-y\">\n                    {syncQueue.map((item) => (\n                      <div key={item.id} className=\"p-4 hover:bg-gray-50\">\n                        <div className=\"flex items-center space-x-3\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedItems.has(item.id)}\n                            onChange={() => toggleSelectItem(item.id)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(item._status)}`}>\n                                  {item._status}\n                                </span>\n                                <span className={`px-2 py-1 rounded text-xs font-medium ${getPriorityColor(item._priority)}`}>\n                                  Priority {item._priority}\n                                </span>\n                                <span className=\"text-sm font-medium text-gray-900\">\n                                  {item.operation} {item.entityType}\n                                </span>\n                              </div>\n                              <div className=\"text-xs text-gray-500\">\n                                {item._attempts > 0 && `${item._attempts} attempts • `}\n                                {formatTime(item.timestamp)}\n                              </div>\n                            </div>\n                            \n                            <div className=\"mt-1 text-sm text-gray-600\">\n                              ID: {item.entityId || 'new'}\n                              {item._lastAttempt && (\n                                <span className=\"ml-4\">\n                                  Last attempt: {formatTime(item._lastAttempt)}\n                                </span>\n                              )}\n                            </div>\n                            \n                            {/* Payload Preview */}\n                            <div className=\"mt-2 text-xs text-gray-500 bg-gray-100 p-2 rounded\">\n                              <pre className=\"whitespace-pre-wrap overflow-hidden\">\n                                {JSON.stringify(item.payload, null, 2).substring(0, 200)}\n                                {JSON.stringify(item.payload).length > 200 && '...'}\n                              </pre>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Database Stats Tab */}\n          {activeTab === 'stats' && dbStats && (\n            <div className=\"p-6 overflow-auto\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{formatBytes(dbStats.size)}</div>\n                  <div className=\"text-blue-800\">Database Size</div>\n                </div>\n\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">{dbStats.customers}</div>\n                  <div className=\"text-green-800\">Customers</div>\n                </div>\n\n                <div className=\"bg-purple-50 p-4 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">{dbStats.jobs}</div>\n                  <div className=\"text-purple-800\">Jobs</div>\n                </div>\n\n                <div className=\"bg-orange-50 p-4 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">{dbStats.materials}</div>\n                  <div className=\"text-orange-800\">Materials</div>\n                </div>\n\n                <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">{dbStats.pendingSync}</div>\n                  <div className=\"text-yellow-800\">Pending Sync</div>\n                </div>\n\n                <div className=\"bg-red-50 p-4 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">{dbStats.unsynced}</div>\n                  <div className=\"text-red-800\">Unsynced Items</div>\n                </div>\n              </div>\n\n              {dbStats.lastSync && (\n                <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-sm text-gray-600\">\n                    Last successful sync: {formatTime(dbStats.lastSync.getTime())}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Conflicts Tab */}\n          {activeTab === 'conflicts' && (\n            <div className=\"p-6 overflow-auto\">\n              <div className=\"text-center text-gray-500\">\n                <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                </svg>\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Conflict Resolution</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Conflicts are automatically resolved using the configured strategy.\n                  {syncQueue.filter(q => q._attempts > 0).length > 0 && (\n                    <span className=\"block mt-2\">\n                      {syncQueue.filter(q => q._attempts > 0).length} operations have failed and may need manual resolution.\n                    </span>\n                  )}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SyncManagementModal;","import React from 'react';\nimport { useOnlineStatus } from '../hooks/useOnlineStatus';\n\ninterface OfflineDataIndicatorProps {\n  isUnsynced?: boolean;\n  lastModified?: Date;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showText?: boolean;\n}\n\nconst OfflineDataIndicator: React.FC<OfflineDataIndicatorProps> = ({\n  isUnsynced = false,\n  lastModified,\n  className = '',\n  size = 'sm',\n  showText = false,\n}) => {\n  const isOnline = useOnlineStatus();\n\n  if (!isUnsynced && isOnline) {\n    return null; // Don't show indicator for synced data when online\n  }\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'sm': return 'w-2 h-2';\n      case 'md': return 'w-3 h-3';\n      case 'lg': return 'w-4 h-4';\n      default: return 'w-2 h-2';\n    }\n  };\n\n  const getIndicatorColor = () => {\n    if (!isOnline) return 'bg-gray-400'; // Offline mode\n    if (isUnsynced) return 'bg-yellow-400'; // Has unsynced changes\n    return 'bg-green-400'; // Synced\n  };\n\n  const getIndicatorText = () => {\n    if (!isOnline) return 'Offline';\n    if (isUnsynced) return 'Unsynced';\n    return 'Synced';\n  };\n\n  const formatTime = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMins < 1) return 'just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${diffDays}d ago`;\n  };\n\n  return (\n    <div className={`flex items-center space-x-1 ${className}`}>\n      {/* Status Dot */}\n      <div \n        className={`${getSizeClasses()} rounded-full ${getIndicatorColor()} flex-shrink-0`}\n        title={`${getIndicatorText()}${lastModified ? ` • Modified ${formatTime(lastModified)}` : ''}`}\n      >\n        {/* Pulse animation for unsynced items */}\n        {isUnsynced && (\n          <div className={`${getSizeClasses()} rounded-full bg-yellow-400 animate-ping absolute`}></div>\n        )}\n      </div>\n\n      {/* Text Indicator */}\n      {showText && (\n        <span className=\"text-xs text-gray-500\">\n          {getIndicatorText()}\n          {lastModified && (\n            <span className=\"ml-1\">\n              • {formatTime(lastModified)}\n            </span>\n          )}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default OfflineDataIndicator;","import React, { useState, useEffect } from 'react';\nimport { offlineDb } from '../services/db.service';\nimport { offlineDataService } from '../services/offline-data.service';\nimport { syncService } from '../services/sync.service';\nimport { useOnlineStatus } from '../hooks/useOnlineStatus';\n// Inline type definitions\ninterface Customer {\n  id: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  address: string;\n  isArchived?: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Job {\n  id: string;\n  customerId: string;\n  title: string;\n  description?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  scheduledDate?: string;\n  completedDate?: string;\n  estimatedHours?: number;\n  actualHours?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Material {\n  id: string;\n  name: string;\n  description?: string;\n  unit: string;\n  cost: number;\n  supplier?: string;\n  isArchived?: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\nimport SyncManagementModal from './SyncManagementModal';\nimport OfflineDataIndicator from './OfflineDataIndicator';\n\ninterface DatabaseStats {\n  size: number;\n  customers: number;\n  jobs: number;\n  materials: number;\n  pendingSync: number;\n  unsynced: number;\n  lastSync?: Date;\n}\n\ninterface DataBreakdown {\n  totalItems: number;\n  syncedItems: number;\n  unsyncedItems: number;\n  pendingItems: number;\n  recentlyModified: number;\n}\n\ninterface SelectiveSyncOptions {\n  customers: boolean;\n  jobs: boolean;\n  materials: boolean;\n  onlyActive: boolean;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n}\n\nconst OfflineDataDashboard: React.FC = () => {\n  const isOnline = useOnlineStatus();\n  const [dbStats, setDbStats] = useState<DatabaseStats | null>(null);\n  const [recentData, setRecentData] = useState<{\n    customers: Customer[];\n    jobs: Job[];\n    materials: Material[];\n  } | null>(null);\n  const [unsyncedData, setUnsyncedData] = useState<{\n    customers: Customer[];\n    jobs: Job[];\n    materials: Material[];\n  } | null>(null);\n  const [cacheStats, setCacheStats] = useState<{\n    memoryEntries: number;\n    memorySize: number;\n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showSyncModal, setShowSyncModal] = useState(false);\n  const [selectiveSyncOptions, setSelectiveSyncOptions] = useState<SelectiveSyncOptions>({\n    customers: true,\n    jobs: true,\n    materials: true,\n    onlyActive: true,\n  });\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  useEffect(() => {\n    loadDashboardData();\n    const interval = setInterval(loadDashboardData, 10000); // Update every 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      const [\n        stats,\n        recent,\n        unsynced,\n        cache,\n      ] = await Promise.all([\n        offlineDb.getDatabaseStats(),\n        offlineDataService.getRecentlyModified(24), // Last 24 hours\n        offlineDataService.getUnsyncedItems(),\n        Promise.resolve(offlineDataService.getCacheStats()),\n      ]);\n\n      setDbStats(stats);\n      setRecentData(recent);\n      setUnsyncedData(unsynced);\n      setCacheStats(cache);\n    } catch (error) {\n      // Failed to load dashboard data\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClearCache = async () => {\n    if (window.confirm('Are you sure you want to clear all cached data? This will improve performance but may cause slower loading initially.')) {\n      try {\n        await offlineDataService.clearAllCaches();\n        await loadDashboardData();\n      } catch (error) {\n        // Failed to clear cache\n      }\n    }\n  };\n\n  const handleSelectiveSync = async () => {\n    if (!isOnline) {\n      alert('You must be online to perform a sync.');\n      return;\n    }\n\n    setIsSyncing(true);\n    try {\n      // This is a simplified selective sync - in a real implementation,\n      // you'd want to implement more sophisticated selective sync logic\n      const result = await syncService.forceSync();\n      \n      if (result.success) {\n        alert(`Sync completed successfully! Processed ${result.processed} operations with ${result.conflicts} conflicts.`);\n      } else {\n        alert(`Sync completed with errors. ${result.errors.length} operations failed.`);\n      }\n      \n      await loadDashboardData();\n    } catch (error) {\n      // Selective sync failed\n      alert('Selective sync failed. Please try again.');\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const handlePreloadData = async () => {\n    setIsLoading(true);\n    try {\n      await offlineDataService.preloadCriticalData();\n      alert('Critical data has been preloaded for offline use.');\n      await loadDashboardData();\n    } catch (error) {\n      // Failed to preload data\n      alert('Failed to preload data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getDataBreakdown = (type: 'customers' | 'jobs' | 'materials'): DataBreakdown => {\n    if (!dbStats || !unsyncedData || !recentData) {\n      return {\n        totalItems: 0,\n        syncedItems: 0,\n        unsyncedItems: 0,\n        pendingItems: 0,\n        recentlyModified: 0,\n      };\n    }\n\n    const totalItems = dbStats[type];\n    const unsyncedItems = unsyncedData[type].length;\n    const recentlyModified = recentData[type].length;\n    \n    return {\n      totalItems,\n      syncedItems: totalItems - unsyncedItems,\n      unsyncedItems,\n      pendingItems: 0, // Would need to calculate from sync queue\n      recentlyModified,\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map(i => (\n              <div key={i} className=\"bg-gray-200 h-32 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Offline Data Dashboard</h1>\n        <div className=\"flex items-center space-x-3\">\n          <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n            isOnline ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n          }`}>\n            {isOnline ? 'Online' : 'Offline'}\n          </div>\n          <button\n            onClick={() => setShowSyncModal(true)}\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\n          >\n            Sync Management\n          </button>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Storage Used</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {dbStats ? formatBytes(dbStats.size) : '0 B'}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Unsynced Items</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {dbStats?.unsynced || 0}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Pending Sync</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {dbStats?.pendingSync || 0}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Cache Entries</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {cacheStats?.memoryEntries || 0}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                {cacheStats ? formatBytes(cacheStats.memorySize) : '0 B'}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Data Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        {['customers', 'jobs', 'materials'].map(type => {\n          const breakdown = getDataBreakdown(type as any);\n          const Icon = type === 'customers' ? (\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n          ) : type === 'jobs' ? (\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m8 0H8m8 0v2a2 2 0 01-2 2H10a2 2 0 01-2-2V8m8 0V6a2 2 0 00-2-2H10a2 2 0 00-2 2v2m8 0v8a2 2 0 01-2 2H10a2 2 0 01-2-2v-8\" />\n          ) : (\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n          );\n\n          return (\n            <div key={type} className=\"bg-white p-6 rounded-lg shadow-sm border\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 capitalize\">{type}</h3>\n                <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    {Icon}\n                  </svg>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Total Items</span>\n                  <span className=\"font-medium\">{breakdown.totalItems}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600 flex items-center\">\n                    Synced\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full ml-2\"></div>\n                  </span>\n                  <span className=\"font-medium text-green-600\">{breakdown.syncedItems}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600 flex items-center\">\n                    Unsynced\n                    <div className=\"w-2 h-2 bg-yellow-400 rounded-full ml-2\"></div>\n                  </span>\n                  <span className=\"font-medium text-yellow-600\">{breakdown.unsyncedItems}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Recently Modified</span>\n                  <span className=\"font-medium text-blue-600\">{breakdown.recentlyModified}</span>\n                </div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mt-4\">\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-green-400 h-2 rounded-full\"\n                    style={{ \n                      width: breakdown.totalItems > 0 \n                        ? `${(breakdown.syncedItems / breakdown.totalItems) * 100}%` \n                        : '0%'\n                    }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Actions */}\n      <div className=\"bg-white p-6 rounded-lg shadow-sm border mb-8\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Data Management</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <button\n            onClick={handleSelectiveSync}\n            disabled={!isOnline || isSyncing}\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n          >\n            {isSyncing ? 'Syncing...' : 'Force Sync All'}\n          </button>\n          \n          <button\n            onClick={handlePreloadData}\n            disabled={isLoading}\n            className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:bg-gray-400\"\n          >\n            Preload Critical Data\n          </button>\n          \n          <button\n            onClick={handleClearCache}\n            className=\"px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600\"\n          >\n            Clear Cache\n          </button>\n          \n          <button\n            onClick={() => window.location.reload()}\n            className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600\"\n          >\n            Refresh App\n          </button>\n        </div>\n      </div>\n\n      {/* Last Sync Info */}\n      {dbStats?.lastSync && (\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600\">\n              Last successful sync: {dbStats.lastSync.toLocaleString()}\n            </span>\n            <OfflineDataIndicator \n              isUnsynced={dbStats.unsynced > 0} \n              lastModified={dbStats.lastSync}\n              showText\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Sync Management Modal */}\n      <SyncManagementModal\n        isOpen={showSyncModal}\n        onClose={() => setShowSyncModal(false)}\n      />\n    </div>\n  );\n};\n\nexport default OfflineDataDashboard;"],"names":["SyncManagementModal","isOpen","onClose","activeTab","setActiveTab","useState","syncQueue","setSyncQueue","dbStats","setDbStats","isLoading","setIsLoading","selectedItems","setSelectedItems","useEffect","loadData","interval","queue","stats","offlineDb","error","handleForceSync","syncService","handleClearQueue","handleRetrySelected","operationId","handleRemoveSelected","toggleSelectAll","item","toggleSelectItem","id","newSelected","getStatusColor","status","getPriorityColor","priority","formatBytes","bytes","k","sizes","i","formatTime","timestamp","jsxs","jsx","q","tab","OfflineDataIndicator","isUnsynced","lastModified","className","size","showText","isOnline","useOnlineStatus","getSizeClasses","getIndicatorColor","getIndicatorText","date","diffMs","diffMins","diffHours","diffDays","OfflineDataDashboard","recentData","setRecentData","unsyncedData","setUnsyncedData","cacheStats","setCacheStats","showSyncModal","setShowSyncModal","selectiveSyncOptions","setSelectiveSyncOptions","isSyncing","setIsSyncing","loadDashboardData","recent","unsynced","cache","offlineDataService","handleClearCache","handleSelectiveSync","result","handlePreloadData","getDataBreakdown","type","totalItems","unsyncedItems","recentlyModified","breakdown","Icon"],"mappings":"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"}